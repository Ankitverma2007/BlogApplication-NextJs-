import * as React from "react";
import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css"; 
import Box from "@mui/material/Box";
import Fab from "@mui/material/Fab";
import AddIcon from "@mui/icons-material/Add";
import {
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  TextField,
} from "@mui/material";
import { Button } from "@mui/joy";
import { useRouter } from "next/router";

const inter = Inter({ subsets: ["latin"] });

export default function BlogUpload() {
  const router = useRouter();

  const generateUniqueID = () => {
    return Math.floor(Math.random() * 1000000).toString();
  };
  const [open, setOpen] = React.useState(false);
  const [formValue, setFormValue] = React.useState({
    Tittle: "",
    Descreption: "",
    BlogID: generateUniqueID(),
  });

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const options = {
        method: "POST",
        Headers: { "content-type": "application/json" },
        body: JSON.stringify(formValue),
      };

      const response = await fetch("/api/blogs", options);

      if (!response.ok) {
        throw new Error(
          `statusCode ${response.status}- ${response.statusText}`
        );
      }

      const responseData = await response.json();
      // Handle the response data as needed

      // Reset form values
      setFormValue({
        Tittle: "",
        Descreption: "",
        BlogID: generateUniqueID(),
      });

      router.push("/");

      handleClose();
    } catch (error) {
      router.push("/");

      handleClose();
      console.error(error.message);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <main className={`${styles.main} ${inter.className}`}> */}
      <Box
        sx={{
          position: "absolute",
          right: "0%",
          top: "95%",
          "& > :not(style)": { m: 1 },
        }}
      >
        <Fab color="primary" aria-label="add" onClick={handleClickOpen}>
          <AddIcon />
        </Fab>
      </Box>

      <Dialog open={open} onClose={handleClose}>
        <form onSubmit={handleSubmit}>
          <DialogTitle>Create Blog</DialogTitle>
          <DialogContent>
            <DialogContentText>Blog Data</DialogContentText>
            <TextField
              autoFocus
              margin="dense"
              id="title" 
              label="Title"
              type="text"
              fullWidth
              variant="standard"
              value={formValue.Tittle}
              onChange={(e) =>
                setFormValue({ ...formValue, Tittle: e.target.value })
              }
            />
            <TextField
              autoFocus
              margin="dense"
              id="description"
              label="Description"
              type="text"
              fullWidth
              variant="standard"
              value={formValue.Descreption}
              onChange={(e) =>
                setFormValue({ ...formValue, Descreption: e.target.value })
              }
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button type="submit">Submit</Button>
          </DialogActions>
        </form>
      </Dialog>
      {/* </main> */}
    </>
  );
}
